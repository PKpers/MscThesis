BasisDirectory[ga1] = StringDrop[DirectoryName[$Input], -1]
ga1 /: BasisSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/BasisSectors[ga1]"]]
ga1 /: CurrentState[ga1] := <|NewDsBasis -> True, GenerateIBP -> True, 
   AnalyzeSectors -> True, FindSymmetries -> False|>
ga1 /: CutDs[ga1] := {1, 1, 1, 0, 0, 0}
ga1 /: Definitions[ga1] := {Hold[MetricTensor[] === d, SetDim[d]], 
   Hold[VecQ[l1], Declare[l1, Vector]], Hold[VecQ[a], Declare[a, Vector]], 
   Hold[VecQ[b], Declare[b, Vector]], Hold[VecQ[q], Declare[q, Vector]], 
   Hold[VecQ[v1], Declare[v1, Vector]], Hold[VecQ[v2], Declare[v2, Vector]], 
   Hold[LiteRed`Private`ExpresionType[a] === LiteRed`Private`ExpresionType[
      a], Declare[a, LiteRed`Private`ExpresionType[a]]], 
   Hold[LiteRed`Private`ExpresionType[b] === LiteRed`Private`ExpresionType[
      b], Declare[b, LiteRed`Private`ExpresionType[b]]], 
   Hold[LiteRed`Private`ExpresionType[q] === LiteRed`Private`ExpresionType[
      q], Declare[q, LiteRed`Private`ExpresionType[q]]], 
   Hold[LiteRed`Private`ExpresionType[v1] === LiteRed`Private`ExpresionType[
      v1], Declare[v1, LiteRed`Private`ExpresionType[v1]]], 
   Hold[LiteRed`Private`ExpresionType[v2] === LiteRed`Private`ExpresionType[
      v2], Declare[v2, LiteRed`Private`ExpresionType[v2]]], 
   Hold[LiteRed`Private`ExpresionType[y1] === LiteRed`Private`ExpresionType[
      y1], Declare[y1, LiteRed`Private`ExpresionType[y1]]], 
   Hold[LiteRed`Private`ExpresionType[y2] === LiteRed`Private`ExpresionType[
      y2], Declare[y2, LiteRed`Private`ExpresionType[y2]]], 
   Hold[LiteRed`Private`ExpresionType[y4] === LiteRed`Private`ExpresionType[
      y4], Declare[y4, LiteRed`Private`ExpresionType[y4]]], 
   Hold[LiteRed`Private`ExpresionType[y5] === LiteRed`Private`ExpresionType[
      y5], Declare[y5, LiteRed`Private`ExpresionType[y5]]], 
   Hold[LiteRed`Private`ExpresionType[y6] === LiteRed`Private`ExpresionType[
      y6], Declare[y6, LiteRed`Private`ExpresionType[y6]]], 
   Hold[LiteRed`Private`ExpresionType[yb] === LiteRed`Private`ExpresionType[
      yb], Declare[yb, LiteRed`Private`ExpresionType[yb]]], 
   Hold[sp[a, a] === y2, sp[a, a] = y2], Hold[sp[b, b] === yb, 
    sp[b, b] = yb], Hold[sp[q, q] === y4, sp[q, q] = y4], 
   Hold[sp[v1, v1] === 1, sp[v1, v1] = 1], Hold[sp[v2, v2] === 1, 
    sp[v2, v2] = 1], Hold[sp[a, b] === 0, sp[a, b] = 0], 
   Hold[sp[a, q] === y5, sp[a, q] = y5], Hold[sp[a, v1] === 0, 
    sp[a, v1] = 0], Hold[sp[a, v2] === 0, sp[a, v2] = 0], 
   Hold[sp[b, q] === y6, sp[b, q] = y6], Hold[sp[b, v1] === 0, 
    sp[b, v1] = 0], Hold[sp[b, v2] === 0, sp[b, v2] = 0], 
   Hold[sp[q, v1] === 0, sp[q, v1] = 0], Hold[sp[q, v2] === 0, 
    sp[q, v2] = 0], Hold[sp[v1, v2] === y1, sp[v1, v2] = y1]}
ga1 /: Ds[ga1] := {sp[l1, l1], sp[-l1 + q, -l1 + q], sp[l1, v2], sp[l1, v1], 
   sp[a, l1], sp[b, l1]}
ga1 /: DsBasisQ[ga1] := True
ga1 /: EMs[ga1] := {a, b, q, v1, v2}
ga1 /: ExtMappedSectors[ga1] := {}
ga1 /: ExtSectorsMappings[ga1] := {}
ga1 /: IBP[ga1] := Get[StringJoin[BasisDirectory[ga1], "/IBP[ga1]"]]
ga1 /: Information[ga1] := (If[ValueQ[ga1::usage], 
    Information[ga1, LongForm -> False]]; 
   Print[Grid[Partition[Union[Replace[Replace[First /@ UpValues[ga1] /. 
          HoldPattern -> HoldForm, 
         {HoldPattern[HoldForm[(LiteRed`Private`f$_)[ga1, __]]] :> 
           HoldForm[LiteRed`Private`f$[ga1, "\[Ellipsis]"]]}, {1}], 
        {HoldPattern[LiteRed`Private`x$:HoldForm[(LiteRed`Private`f$_)[ga1, 
              ___]]] :> Button[LiteRed`Private`x$, 
           (SelectionMove[ButtonNotebook[], All, GeneratedCell]; 
             NotebookDelete[]; Information[Evaluate[LiteRed`Private`x$[[1,
                0]]], LongForm -> False]; Print[TableForm[Cases[UpValues[
                  ga1], HoldPattern[LiteRed`Private`a$_ :> 
                    LiteRed`Private`b$_] /; MatchQ[LiteRed`Private`a$[[1,0]], 
                   LiteRed`Private`x$[[1,0]]]] /. HoldPattern -> 
                 HoldForm]]) & , Appearance -> "Frameless", 
           BaseStyle -> "InformationLink"]}, {1}]], 5], 
     DefaultBaseStyle -> "InfoGrid"]])
ga1 /: jRules[ga1, 1, 1, 1, 0, 0, 0] := 
  Get[StringJoin[BasisDirectory[ga1], "/jRules[ga1, 1, 1, 1, 0, 0, 0]"]]
ga1 /: jRules[ga1, 1, 1, 1, 1, 0, 0] := 
  Get[StringJoin[BasisDirectory[ga1], "/jRules[ga1, 1, 1, 1, 1, 0, 0]"]]
ga1 /: jsOrder[ga1] := {"np", "cp", "-ds", "-ns"}
ga1 /: jsOrder[ga1, 0, 1, 1, 0, 0, 0] := {{-1, 1, 1, -1, -1, -1}, 
   {-1, 0, 0, -1, -1, -1}, {0, -1, 0, 0, 0, 0}, {1, 0, 0, 0, 0, 0}, 
   {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 0, 1, 1, 1, 0, 0] := {{-1, 1, 1, 1, -1, -1}, 
   {-1, 0, 0, 0, -1, -1}, {0, 1, 1, 0, 0, 0}, {0, -1, 0, 0, 0, 0}, 
   {1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 0, 1, 0, 0, 0] := {{1, -1, 1, -1, -1, -1}, 
   {0, -1, 0, -1, -1, -1}, {-1, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0}, 
   {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 0, 1, 1, 0, 0] := {{1, -1, 1, 1, -1, -1}, 
   {0, -1, 0, 0, -1, -1}, {1, 0, 1, 0, 0, 0}, {-1, 0, 0, 0, 0, 0}, 
   {0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 1, 0, 0, 0, 0] := {{1, 1, -1, -1, -1, -1}, 
   {0, 0, -1, -1, -1, -1}, {-1, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0}, 
   {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 1, 0, 1, 0, 0] := {{1, 1, -1, 1, -1, -1}, 
   {0, 0, -1, 0, -1, -1}, {1, 1, 0, 0, 0, 0}, {-1, 0, 0, 0, 0, 0}, 
   {0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 1, 1, 0, 0, 0] := {{1, 1, 1, -1, -1, -1}, 
   {0, 0, 0, -1, -1, -1}, {-1, 0, 0, 0, 0, 0}, {0, -1, 0, 0, 0, 0}, 
   {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jsOrder[ga1, 1, 1, 1, 1, 0, 0] := {{1, 1, 1, 1, -1, -1}, 
   {0, 0, 0, 0, -1, -1}, {1, 1, 1, 0, 0, 0}, {-1, 0, 0, 0, 0, 0}, 
   {0, -1, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0}}
ga1 /: jSymmetries[ga1, 1, 1, 1, 0, 0, 0] := 
  Get[StringJoin[BasisDirectory[ga1], "/jSymmetries[ga1, 1, 1, 1, 0, 0, 0]"]]
ga1 /: jSymmetries[ga1, 1, 1, 1, 1, 0, 0] := 
  Get[StringJoin[BasisDirectory[ga1], "/jSymmetries[ga1, 1, 1, 1, 1, 0, 0]"]]
ga1 /: LI[ga1] := Get[StringJoin[BasisDirectory[ga1], "/LI[ga1]"]]
ga1 /: LMs[ga1] := {l1}
ga1 /: MappedSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/MappedSectors[ga1]"]]
ga1 /: MIs[ga1] := Get[StringJoin[BasisDirectory[ga1], "/MIs[ga1]"]]
ga1 /: NDs[ga1] := 6
ga1 /: NonZeroSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/NonZeroSectors[ga1]"]]
ga1 /: Parameters[ga1] := {y1, y2, y4, y5, y6, yb, d}
ga1 /: PowerShifts[ga1] := {0, 0, 0, 0, 0, 0}
ga1 /: SectorsMappings[ga1] := {}
ga1 /: SectorsPattern[ga1] := {_, _, _, _, 0, 0}
ga1 /: SimpleSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/SimpleSectors[ga1]"]]
ga1 /: SPs[ga1] := {sp[a, l1], sp[b, l1], sp[l1, l1], sp[l1, q], sp[l1, v1], 
   sp[l1, v2]}
ga1 /: SR[ga1] := Get[StringJoin[BasisDirectory[ga1], "/SR[ga1]"]]
ga1 /: Toj[ga1] := {sp[a, l1] -> j[ga1, 0, 0, 0, 0, -1, 0], 
   sp[b, l1] -> j[ga1, 0, 0, 0, 0, 0, -1], 
   sp[l1, l1] -> j[ga1, -1, 0, 0, 0, 0, 0], 
   sp[l1, q] -> (y4 + j[ga1, -1, 0, 0, 0, 0, 0] - j[ga1, 0, -1, 0, 0, 0, 0])/
     2, sp[l1, v1] -> j[ga1, 0, 0, 0, -1, 0, 0], 
   sp[l1, v2] -> j[ga1, 0, 0, -1, 0, 0, 0]}
ga1 /: UniqueSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/UniqueSectors[ga1]"]]
ga1 /: ZerojRule[ga1] := LiteRed`Private`jjj:j[ga1, __] :> 
   0 /; Module[{LiteRed`Private`jjs = 
       Rest[List @@ jSector[LiteRed`Private`jjj]]}, 
     Or @@ (BitOr[LiteRed`Private`jjs, #1] === #1 & ) /@ 
       {{1, 1, 0, 1, 0, 0}, {1, 0, 1, 1, 0, 0}, {0, 1, 1, 1, 0, 0}}]
ga1 /: ZeroSectors[ga1] := Get[StringJoin[BasisDirectory[ga1], 
    "/ZeroSectors[ga1]"]]
ga1 /: SectorsMappings[ga1, LiteRed`Private`ns$:(0 | 1)..] := 
  Cases[SectorsMappings[ga1], HoldPattern[js[ga1, LiteRed`Private`ns$] -> _]]
ga1::usage = "1-loop basis with 5 external momenta.\nUse Information[ga1] to \
get basis summary.\nThis string can be redefined by setting \
ga1::usage=\"\[Ellipsis]\""; Information[ga1, LongForm -> False]; 
LiteRed`Private`CheckDefs[ga1]
BasisDirectory[ga1]
